import pandas as pd
import os


manifest_df = pd.read_csv(
    config["manifest"], sep="\t", keep_default_na=False
).set_index(["sample"], drop=False)
haps = manifest_df.columns
chrX_gsize = config.get("chrX_gsize", 154259566)  # chm13v2 chrX size
conf_fraction = config.get("confident_fraction", 0.80)

# Make sure there is just one entry
assert (
    len(config["reference"].keys()) == 1
), "Only one reference_name:reference_path pair allowed, e.g. chrX_T2T: /path/to/fasta"

ref_name = list(config["reference"].keys()).pop()
ref_path = config["reference"][ref_name]

target_chr = config.get("target_chr", "chrX")


wildcard_constraints:
    sample="|".join(manifest_df.index),
    hap="|".join(manifest_df.columns),
    chr=target_chr,
    fasta_origin="main|support",


# TODO: throw error if support_fofn is NA or the length is less


def get_final_output(wildcards):
    # p=f"results/{ref_name}/{{sample}}/{{asm}}_{{conf_prnct}}_no-mapping.bed"
    p = f"results/{ref_name}/{{sample}}/ragtag/main/patch/{{asm}}_confident-mapping_{{conf_prnct}}/ragtag.patch.fasta"

    final_output = []
    for row in manifest_df.itertuples():
        asm_names = get_fa_df(sample_name=row.sample, which_one="main").index.tolist()
        for asm in asm_names:
            final_output.append(
                p.format(sample=row.sample, asm=asm, conf_prnct=conf_fraction)
            )

    return final_output


def get_fasta(wildcards):
    fa_df = get_fa_df(wildcards.sample, which_one=wildcards.fasta_origin)
    return fa_df.at[wildcards.asm, "filepath"]


def get_fa_df(sample_name, which_one="main"):
    if which_one == "main":
        fofn = "main_fofn"
    else:
        fofn = "support_fofn"

    fofn_path = manifest_df.at[sample_name, fofn]
    fofn_df = pd.read_table(fofn_path, names=["filepath"])

    # Get the cell name minus the extension
    def get_support_asm_name(fn):
        bn = os.path.basename(fn).split(".")[:-1]
        return ".".join(bn)

    fofn_df["asm"] = fofn_df.filepath.map(get_support_asm_name)

    # Check for duplicates
    if fofn_df.asm.duplicated().any():
        # Add this column to offset duplicated namings
        fofn_df["idx"] = range(fofn_df.shape[0])

        fofn_df["asm"] = fofn_df["asm"] + "-" + fofn_df.idx.astype(str)

    fofn_df.set_index("asm", inplace=True)
    return fofn_df


def get_confident_beds(wildcards):
    p = f"results/{ref_name}/{{sample}}/{{fasta_origin}}/{{asm}}_{{conf_prnct}}_confident-mapping.bed"

    beds = []

    # We want the supporting contigs that map to X
    fasta_origin = "support"
    for row in manifest_df.itertuples():
        asm_names = get_fa_df(
            sample_name=row.sample, which_one=fasta_origin
        ).index.tolist()
        for asm in asm_names:
            beds.append(
                p.format(
                    sample=row.sample,
                    fasta_origin=fasta_origin,
                    asm=asm,
                    conf_prnct=wildcards.conf_prnct,
                )
            )

    # Add the main contigs that map to X
    fasta_origin = "main"
    beds.append(
        p.format(
            sample=wildcards.sample,
            fasta_origin=fasta_origin,
            asm=wildcards.asm,
            conf_prnct=wildcards.conf_prnct,
        )
    )

    return beds


def get_ragtag_patch_input(wildcards):
    asm_name = (
        get_fa_df(sample_name=wildcards.sample, which_one="support")
        .index.tolist()
        .pop()
    )

    return {
        "scaffold_main": "results/{ref_name}/{sample}/ragtag/main/scaffold/{asm}_confident-mapping_{conf_prnct}/ragtag.scaffold.fasta",
        "scaffold_support": f"results/{wildcards.ref_name}/{wildcards.sample}/ragtag/support/scaffold/{asm_name}_confident-mapping_{wildcards.conf_prnct}/ragtag.scaffold.fasta",
    }


rule all:
    input:
        get_final_output,


rule make_paf:
    input:
        fa=get_fasta,
        ref=ref_path,
    output:
        paf=temp("results/{ref_name}/{sample}/{fasta_origin}/{asm}.paf"),
    envmodules:
        "modules",
        "modules-init",
        "modules-gs/prod",
        "modules-eichler/prod",
        "minimap2/2.24",
    params:
        minimap=config.get("minimap_params", "-x asm20"),
    threads: 8
    resources:
        mem=12,
        hrs=72,
    shell:
        """
        minimap2 \
            --eqx -c --cs \
            {params.minimap} \
            -t {threads} -K {resources.mem}G \
            -o {output.paf} \
            {input.ref} {input.fa}
        """


rule subset_chrX:
    input:
        paf="results/{ref_name}/{sample}/{fasta_origin}/{asm}.paf",
    output:
        paf="results/{ref_name}/{sample}/{fasta_origin}/chrX_{asm}.paf",
    threads: 1
    resources:
        mem=12,
        hrs=72,
    params:
        target_chr=target_chr,
    shell:
        """
        cat {input.paf} | grep -w {params.target_chr} > {output.paf}
        """


rule extract_confident_contigs:
    """A confident contig maps 80% of its content to chrX."""
    input:
        paf="results/{ref_name}/{sample}/{fasta_origin}/chrX_{asm}.paf",
    output:
        confident_paf="results/{ref_name}/{sample}/{fasta_origin}/{asm}_{conf_prnct}_confident-mapping.paf",
        confident_bed="results/{ref_name}/{sample}/{fasta_origin}/{asm}_{conf_prnct}_confident-mapping.bed",
        confident_contigs_intervals=temp(
            "results/{ref_name}/{sample}/{fasta_origin}/{asm}_{conf_prnct}_confident-mapping_contig-intervals.txt"
        ),
        confident_contigs="results/{ref_name}/{sample}/{fasta_origin}/{asm}_{conf_prnct}_confident-mapping_contigs.txt",
    run:
        # Please reference the columns here: https://github.com/lh3/miniasm/blob/master/PAF.md
        df = pd.read_table(input.paf, header=None, usecols=range(0, 12))

        groupdf = df.groupby([0, 1])[9].sum().reset_index()
        groupdf.loc[:, "fraction"] = groupdf[9] / groupdf[1]
        groupdf = groupdf.query(rf"fraction >= {wildcards.conf_prnct}")

        groupdf.drop(columns=[9], inplace=True)
        df = df.merge(groupdf, how="inner", on=[0, 1]).drop(columns=["fraction"])

        df.to_csv(output.confident_paf, sep="\t", header=False, index=False)

        # contig id: contig-name:start-end
        df.loc[:, 12] = (
            df[0].astype(str) + ":" + df[2].astype(str) + "-" + df[3].astype(str)
        )

        # Group the contig id and sort
        df.groupby([5, 7, 8])[12].apply(",".join).reset_index().to_csv(
            output.confident_bed, sep="\t", header=False, index=False
        )

        # Extract the contig intervals
        df[12].to_csv(output.confident_contigs_intervals, header=False, index=False)

        # Extract the confident contig names
        df[0].drop_duplicates().to_csv(
            output.confident_contigs, header=False, index=False
        )


rule extract_nomaps:
    """Extract regions where there is no contig confidently mapping to chrX"""
    input:
        confident_beds=get_confident_beds,
    output:
        no_mappings_bed=temp(
            "results/{ref_name}/{sample}/{asm}_{conf_prnct}_no-mapping.bed"
        ),
    params:
        chrX_gsize=chrX_gsize,
    shell:
        """
        cat {input.confident_beds} \
            | bedtools sort -i - \
            | bedtools merge -i - \
            | bedtools complement -i - -g <(echo -e "chrX\\t{params.chrX_gsize}") > {output.no_mappings_bed}
        """


rule extract_chrX_ref_fasta:
    input:
        reference_fa=ref_path,
        reference_fa_fai=ref_path + ".fai",
    output:
        chrX_ref_fasta=temp("results/{ref_name}/chrX.fasta"),
        chrX_ref_fasta_fai=temp("results/{ref_name}/chrX.fasta.fai"),
    params:
        target_chr=target_chr,
    envmodules:
        "modules",
        "modules-init",
        "modules-gs/prod",
        "modules-eichler/prod",
        "seqtk/1.4",
    threads: 1
    resources:
        mem=16,
        hrs=72,
    shell:
        """
        seqtk subseq \
            {input.reference_fa} <(echo {params.target_chr})  | seqtk seq -Cl60 /dev/stdin > {output.chrX_ref_fasta}
        
        grep -w {params.target_chr} {input.reference_fa_fai} > {output.chrX_ref_fasta_fai}
        """


rule contig_fasta:
    """Extract sequences of the confident contig intervals"""
    input:
        contig_names="results/{ref_name}/{sample}/{fasta_origin}/{asm}_{conf_prnct}_confident-mapping_contigs.txt",
        original_asm=get_fasta,
    output:
        fasta="results/{ref_name}/{sample}/{fasta_origin}/fasta/{asm}_confident-mapping_{conf_prnct}.fasta",
    params:
        target_chr=target_chr,
    envmodules:
        "modules",
        "modules-init",
        "modules-gs/prod",
        "modules-eichler/prod",
        "seqtk/1.4",
    threads: 1
    resources:
        mem=16,
        hrs=72,
    shell:
        """
        seqtk subseq \
            {input.original_asm} \
            {input.contig_names} \
            | seqtk seq -Cl60 /dev/stdin > {output.fasta}
        seqtk subseq \
            {input.reference_fa} <(echo {params.target_chr})  | seqtk seq -Cl60 /dev/stdin > {output.chrX_ref_fasta}
        """


rule ragtag_scaffold:
    input:
        fasta="results/{ref_name}/{sample}/{fasta_origin}/fasta/{asm}_confident-mapping_{conf_prnct}.fasta",
        reference_fa="results/{ref_name}/chrX.fasta",
        reference_fa_fai="results/{ref_name}/chrX.fasta.fai",
    output:
        ragtag_scaffold_fasta="results/{ref_name}/{sample}/ragtag/{fasta_origin}/scaffold/{asm}_confident-mapping_{conf_prnct}/ragtag.scaffold.fasta",
    envmodules:
        "modules",
        "modules-init",
        "modules-gs/prod",
        "modules-eichler/prod",
        "ragtag/2.1.0",
    threads: 16
    resources:
        mem=8,
        hrs=72,
    shell:
        """
        ragtag.py scaffold \
            -u -t {threads} \
            -o $(dirname {output.ragtag_scaffold_fasta}) \
             {input.reference_fa} {input.fasta}
        """


rule ragtag_patch:
    input:
        unpack(get_ragtag_patch_input),
    output:
        ragtag_patch_fasta="results/{ref_name}/{sample}/ragtag/main/patch/{asm}_confident-mapping_{conf_prnct}/ragtag.patch.fasta",
    envmodules:
        "modules",
        "modules-init",
        "modules-gs/prod",
        "modules-eichler/prod",
        "ragtag/2.1.0",
    threads: 16
    resources:
        mem=8,
        hrs=72,
    shell:
        """
        ragtag.py patch \
            -u -w -t {threads} \
            -o $(dirname {output.ragtag_patch_fasta}) \
             {input.scaffold_main} {input.scaffold_support}
        """


"""
Extract the contigs that flank the no-mapping regions
rule find_flanking_contigs:
    input:
        pass
    output:
        pass

Annotate the regions with no mappings to whether they fall in the centromeres or PAR
rule annotate_nomaps:
    input:
        no_mappings_bed = "results/{ref_name}/{sample}/{asm}_{conf_prnct}_no-mapping.bed"
    output:
        annotated_bed = "results/{ref_name}/{sample}/{asm}_{conf_prnct}_no-mapping_annotated.bed"
    run:
        pass
"""
