import itertools

import pandas as pd

configfile: 'config/config.yaml'

manifest_df = pd.read_table(
    config["manifest"],keep_default_na=False,dtype="str"
).set_index(
    ["sample"],drop=False
)  # sample,fasta,group

target_ref = config["target_ref"]
target_chr = config.get("target_chr","chrX")
chrom_size = config.get("chrom_size",154259566)  # chm13v2 chrX size
conf_fraction = config.get("confident_fraction",0.80)
svbyeye_cntr = config["svbyeye_cntr"]


ref_name = target_ref
ref_path = config["reference"][ref_name]
exclude_centromere = config.get("exclude_centromere", 0)

wildcard_constraints:
    sample="|".join(manifest_df.index),
    hap="|".join(manifest_df.columns),
    chr=target_chr,
    fasta_origin="main|support",
    group="|".join(manifest_df["group"]),
    chrom=target_chr,
    conf_prnct=conf_fraction,
    view="view_\d+",


def get_final_output(wildcards):
    final_output = []

    unique_groups = manifest_df["group"].unique()

    # All vs. all alignment
    for g in unique_groups:
        try:
            order = config["view_order"][g]
            visual_order_df = make_pairs(visual_order_string=order)
            unique_idx = visual_order_df.idx.unique()
            final_output.extend(
                [
                    f"results/{ref_name}/{target_chr}/confident-mapping_{conf_fraction}/all-vs-all/{g}/{view_idx}/{g}-oriented_by-{plt}.png"
                    for view_idx in unique_idx for plt in ["identity", "SV", "identity_ONLY"]
                ]
            )
        except KeyError:
            pass

    # Individual files
    final_output.extend(
        expand(
            [
                "results/{ref_name}/{chrom}/confident-mapping_{conf_prnct}/{sample}/ragtag/scaffold/ragtag.scaffold.fasta",
                "results/{ref_name}/{chrom}/confident-mapping_{conf_prnct}/{sample}/{sample}_no-mapping_annotated.bed",
                "results/{ref_name}/{chrom}/confident-mapping_{conf_prnct}/{sample}/ragtag/scaffold/gaps.bed",
            ],
            ref_name=ref_name,
            conf_prnct=conf_fraction,
            sample=manifest_df.index,
            chrom=target_chr,
        )
    )

    return final_output

def calc_mem_gb(wildcards, input, attempt, threads):
    mb = max(1.5 * input.size_mb, 1000)
    gb = int(mb / 1000)

    if threads != 1:
        gb = int(max(gb / threads, 2))

    return gb * attempt

def get_fasta(wildcards):
    return manifest_df.at[wildcards.sample, "fasta"]


def make_pairs(visual_order_string):
    # Parse the order string
    pair_fasta_tuple = [
        list(itertools.pairwise(x.split(":"))) for x in visual_order_string.split(";")
    ]

    visual_order_df = pd.DataFrame()
    for idx, x in enumerate(pair_fasta_tuple):
        throwaway_df = pd.DataFrame(data=x,columns=["sample_one", "sample_two"])
        throwaway_df["idx"] = f"view_{idx}"
        visual_order_df = pd.concat([visual_order_df, throwaway_df])

    # pair_fasta_tuple = list(itertools.chain.from_iterable(pair_fasta_tuple))

    visual_order_df.reset_index(drop=True,inplace=True)
    return visual_order_df


def get_group_paf(wildcards):
    fasta = []

    order = config["view_order"][wildcards.group]

    visual_order_df = make_pairs(visual_order_string=order)

    fp = f"results/{wildcards.ref_name}/{wildcards.chrom}/confident-mapping_{wildcards.conf_prnct}/all-vs-all/{wildcards.group}/{wildcards.view}/{{sample_one}}_vs_{{sample_two}}.paf"

    for row in visual_order_df.query(fr"idx == '{wildcards.view}'").itertuples():
        fasta.append(fp.format(sample_one=row.sample_one,sample_two=row.sample_two))
        fasta.append(fp.format(sample_one=row.sample_two,sample_two=row.sample_one))

    return fasta


def get_group_items(which_item):
    def inner(wildcards):
        out = []

        order = config["view_order"][wildcards.group]

        visual_order_df = make_pairs(visual_order_string=order)

        if which_item == "paf":
            fp = f"results/{wildcards.ref_name}/{wildcards.chrom}/confident-mapping_{wildcards.conf_prnct}/all-vs-all/{wildcards.group}/{wildcards.view}/{{sample_one}}_vs_{{sample_two}}.paf"

            for row in visual_order_df.query(fr"idx == '{wildcards.view}'").itertuples():
                out.append(fp.format(sample_one=row.sample_one,sample_two=row.sample_two))
                out.append(fp.format(sample_one=row.sample_two,sample_two=row.sample_one))
        elif which_item == "gaps":
            fp = f"results/{wildcards.ref_name}/{wildcards.chrom}/confident-mapping_{wildcards.conf_prnct}/{{target_sample}}/ragtag/scaffold/gaps.bed"

            # take out the ref_name pairings
            visual_order_df = visual_order_df.query(fr"sample_two != '{wildcards.ref_name}'")

            for row in visual_order_df.query(fr"idx == '{wildcards.view}'").itertuples():
                out.append(fp.format(target_sample=row.sample_one))
                out.append(fp.format(target_sample=row.sample_two))
        else:
            raise ValueError(f"Unknown argument to which_item function {which_item}- choose only paf or gaps")

        return out
    return inner

def get_svbyeye_param(wildcards) -> list:
    order = config["view_order"][wildcards.group]
    visual_order_df = make_pairs(visual_order_string=order)

    order_list = pd.melt(visual_order_df.query(fr"idx == '{wildcards.view}'"),value_vars=["sample_one", "sample_two"]).value.unique().tolist()

    return [x if x != wildcards.ref_name else x.replace(wildcards.ref_name, f"{x}-{wildcards.chrom}") for x in order_list]

def get_annotations(wildcards):
    return [v for k, v in config["annotations"].items()]


rule all:
    input:
        get_final_output,


rule make_paf:
    input:
        fa=get_fasta,
        ref=ref_path,
    output:
        paf=temp("results/{ref_name}/confident-mapping_{conf_prnct}/{sample}.paf"),
    envmodules:
        "modules",
        "modules-init",
        "modules-gs/prod",
        "modules-eichler/prod",
        "minimap2/2.24",
    params:
        minimap=config.get("minimap_params","-x asm20"),
    threads: 8
    resources:
        mem=calc_mem_gb,
        hrs=72,
    shell:
        """
        minimap2 \
            {params.minimap} \
            -t {threads} \
            -o {output.paf} \
            {input.ref} {input.fa}
        """


rule subset_chrom:
    input:
        paf="results/{ref_name}/confident-mapping_{conf_prnct}/{sample}.paf",
    output:
        paf="results/{ref_name}/{chrom}/confident-mapping_{conf_prnct}/{sample}/{sample}.paf",
    threads: 1
    resources:
        mem=calc_mem_gb,
        hrs=72,
    shell:
        """
        cat {input.paf} | grep -w {wildcards.chrom} > {output.paf}
        """


rule extract_confident_contigs:
    """A confident contig maps 80% of its content to chrX."""
    input:
        paf="results/{ref_name}/{chrom}/confident-mapping_{conf_prnct}/{sample}/{sample}.paf",
    output:
        confident_paf="results/{ref_name}/{chrom}/confident-mapping_{conf_prnct}/{sample}/{sample}_confident-mapping.paf",
        confident_bed="results/{ref_name}/{chrom}/confident-mapping_{conf_prnct}/{sample}/{sample}_confident-mapping.bed",
        confident_contigs=temp(
            "results/{ref_name}/{chrom}/confident-mapping_{conf_prnct}/{sample}/{sample}_confident-mapping_contigs.txt"
        ),
    run:
        # Please reference the columns here: https://github.com/lh3/miniasm/blob/master/PAF.md
        df = pd.read_table(input.paf,header=None,usecols=range(0,12))

        groupdf = df.groupby([0, 1])[9].sum().reset_index()
        groupdf.loc[:, "fraction"] = groupdf[9] / groupdf[1]
        groupdf = groupdf.query(rf"fraction >= {wildcards.conf_prnct}")

        groupdf.drop(columns=[9],inplace=True)
        df = df.merge(groupdf,how="inner",on=[0, 1]).drop(columns=["fraction"])

        df.to_csv(output.confident_paf,sep="\t",header=False,index=False)

        # contig id: contig-name:start-end
        df.loc[:, 12] = (
                df[0].astype(str) + ":" + df[2].astype(str) + "-" + df[3].astype(str)
        )

        # Since we will output bed-format, the start must be 0-based.
        df[7] = df[7] - 1
        # Group the contig id and sort
        df.groupby([5, 7, 8])[12].apply(",".join).reset_index().to_csv(
            output.confident_bed,sep="\t",header=False,index=False
        )

        # Extract the contig intervals
        # df[12].to_csv(output.confident_contigs_intervals, header=False, index=False)
        # confident_contigs_intervals="results/{ref_name}/{sample}/{fasta_origin}/{asm}_{conf_prnct}_confident-mapping_contig-intervals.txt",

        # Extract the confident contig names
        df[0].drop_duplicates().to_csv(
            output.confident_contigs,header=False,index=False
        )


rule extract_nomaps:
    """Extract regions where there is no contig confidently mapping to chrX"""
    input:
        confident_beds="results/{ref_name}/{chrom}/confident-mapping_{conf_prnct}/{sample}/{sample}_confident-mapping.bed",
    output:
        no_mappings_bed=temp(
            "results/{ref_name}/{chrom}/confident-mapping_{conf_prnct}/{sample}/{sample}_no-mapping.bed"
        ),
    params:
        chrom_size=chrom_size,
    threads: 1
    resources:
        mem=calc_mem_gb,
        hrs=72,
    shell:
        """
        cat {input.confident_beds} \
            | bedtools sort -i - \
            | bedtools merge -i - \
            | bedtools complement -i - -g <(echo -e "{wildcards.chrom}\\t{params.chrom_size}") > {output.no_mappings_bed}
        """


rule annotate_nomaps:
    """Annotate the regions with no mappings to whether they fall in the centromeres or PAR"""
    input:
        annotations=get_annotations,
        no_mappings_bed="results/{ref_name}/{chrom}/confident-mapping_{conf_prnct}/{sample}/{sample}_no-mapping.bed",
    output:
        annotated_bed="results/{ref_name}/{chrom}/confident-mapping_{conf_prnct}/{sample}/{sample}_no-mapping_annotated.bed",
    envmodules:
        "modules",
        "modules-init",
        "modules-gs/prod",
        "modules-eichler/prod",
        "bedtools/2.29.2",
    threads: 1
    resources:
        mem=calc_mem_gb,
        hrs=72,
    shell:
        """
        bedtools intersect \
            -a {input.no_mappings_bed} \
            -b {input.annotations} \
            -filenames \
            -wb -wa > {output.annotated_bed}
        """


rule contig_fasta:
    """Extract sequences of the confident contig intervals"""
    input:
        contig_names="results/{ref_name}/{chrom}/confident-mapping_{conf_prnct}/{sample}/{sample}_confident-mapping_contigs.txt",
        original_asm=get_fasta,
    output:
        fasta="results/{ref_name}/{chrom}/confident-mapping_{conf_prnct}/{sample}/{sample}_confident-mapping.fasta",
    params:
        target_chr=target_chr,
    envmodules:
        "modules",
        "modules-init",
        "modules-gs/prod",
        "modules-eichler/prod",
        "seqtk/1.4",
    threads: 1
    resources:
        mem=calc_mem_gb,
        hrs=72,
    shell:
        """
        seqtk subseq \
            {input.original_asm} \
            {input.contig_names} \
            | seqtk seq -Cl60 /dev/stdin > {output.fasta}
        """


rule extract_chrom_ref_fasta:
    input:
        reference_fa=ref_path,
        reference_fa_fai=ref_path + ".fai",
    output:
        chrom_ref_fasta="results/{ref_name}/{chrom}/{chrom}.fasta",
        chrom_ref_fasta_fai="results/{ref_name}/{chrom}/{chrom}.fasta.fai",
    envmodules:
        "modules",
        "modules-init",
        "modules-gs/prod",
        "modules-eichler/prod",
        "samtools/1.14"
    threads: 1
    resources:
        mem=calc_mem_gb,
        hrs=72,
    shell:
        """
        samtools faidx {input.reference_fa} {wildcards.chrom} > {output.chrom_ref_fasta}
        samtools faidx {output.chrom_ref_fasta}
        """


rule ragtag_scaffold:
    input:
        query_fasta="results/{ref_name}/{chrom}/confident-mapping_{conf_prnct}/{sample}/{sample}_confident-mapping.fasta",
        ref_fasta="results/{ref_name}/{chrom}/{chrom}.fasta",
        ref_fai="results/{ref_name}/{chrom}/{chrom}.fasta.fai",
    output:
        ragtag_scaffold_fasta="results/{ref_name}/{chrom}/confident-mapping_{conf_prnct}/{sample}/ragtag/scaffold/ragtag.scaffold.fasta",
        ragtag_scaffold_fasta_fai="results/{ref_name}/{chrom}/confident-mapping_{conf_prnct}/{sample}/ragtag/scaffold/ragtag.scaffold.fasta.fai",
        ragtag_scaffold_stats="results/{ref_name}/{chrom}/confident-mapping_{conf_prnct}/{sample}/ragtag/scaffold/ragtag.scaffold.stats",
        ragtag_scaffold_agp="results/{ref_name}/{chrom}/confident-mapping_{conf_prnct}/{sample}/ragtag/scaffold/ragtag.scaffold.agp",
        ragtag_scaffold_subset_fasta="results/{ref_name}/{chrom}/confident-mapping_{conf_prnct}/{sample}/ragtag/scaffold/ragtag.scaffold_subset.fasta",
        ragtag_scaffold_subset_fai="results/{ref_name}/{chrom}/confident-mapping_{conf_prnct}/{sample}/ragtag/scaffold/ragtag.scaffold_subset.fasta.fai",
    envmodules:
        "modules",
        "modules-init",
        "modules-gs/prod",
        "modules-eichler/prod",
        "ragtag/2.1.0",
        "samtools/1.14",
    threads: 16
    resources:
        mem=calc_mem_gb,
        hrs=72,
    shell:
        """
        ragtag.py scaffold \
            --mm2-params "-x asm20" \
            -u -t {threads} \
            -o $(dirname {output.ragtag_scaffold_fasta}) \
             {input.ref_fasta} {input.query_fasta} \
         && \
            sed -ri "s/(>.*)/\\1-{wildcards.sample}/" {output.ragtag_scaffold_fasta} && samtools faidx {output.ragtag_scaffold_fasta}

        grep "^{wildcards.chrom}" {output.ragtag_scaffold_fasta_fai} > {output.ragtag_scaffold_subset_fai}
        samtools faidx {output.ragtag_scaffold_fasta} -r <( cut -f1 {output.ragtag_scaffold_subset_fai} ) > {output.ragtag_scaffold_subset_fasta}
        """

rule get_scaffolded_gaps:
    input:
        ragtag_scaffold_agp = "results/{ref_name}/{chrom}/confident-mapping_{conf_prnct}/{sample}/ragtag/scaffold/ragtag.scaffold.agp",
    output:
        scaffold_filled_gaps = "results/{ref_name}/{chrom}/confident-mapping_{conf_prnct}/{sample}/ragtag/scaffold/gaps.bed"
    threads: 1
    resources:
        mem=calc_mem_gb,
        hrs=72,
    shell:
        """
        grep ^{wildcards.chrom} {input.ragtag_scaffold_agp} | grep -w "100" | cut -f1-3 | sed "s/{wildcards.chrom}_RagTag/{wildcards.sample}/g; s/$/\tgap/g" > {output.scaffold_filled_gaps}
        """


def get_desired_pair(wildcards):
    if wildcards.sample_one != ref_name:
        desired_paired_ref = f"results/{ref_name}/{wildcards.chrom}/confident-mapping_{wildcards.conf_prnct}/{wildcards.sample_one}/ragtag/scaffold/ragtag.scaffold_subset.fasta"
    else:
        desired_paired_ref = (
            f"results/{wildcards.ref_name}/{wildcards.chrom}/{wildcards.chrom}.fasta"
        )

    if wildcards.sample_two != ref_name:
        desired_paired_query = f"results/{ref_name}/{wildcards.chrom}/confident-mapping_{wildcards.conf_prnct}/{wildcards.sample_two}/ragtag/scaffold/ragtag.scaffold_subset.fasta"
    else:
        desired_paired_query = (
            f"results/{wildcards.ref_name}/{wildcards.chrom}/{wildcards.chrom}.fasta"
        )

    if exclude_centromere:
        desired_paired_ref = desired_paired_ref.replace(".fasta", "-no_centromere.fasta")
        desired_paired_query = desired_paired_query.replace(".fasta", "-no_centromere.fasta")

    return [desired_paired_ref, desired_paired_query]
    # return {"ref": desired_paired_ref, "query": desired_paired_query}


rule make_annotation_bed:
    input:
        scaffold_filled_gaps=get_group_items(which_item="gaps"),
        centromere = config["annotations"]["censat"]
    output:
        annotation_bed = "results/{ref_name}/{chrom}/confident-mapping_{conf_prnct}/all-vs-all/{group}/{view}/{group}.bed"
    threads: 1
    resources:
        mem=calc_mem_gb,
        hrs=72,
    shell:
        """
        cat {input.scaffold_filled_gaps} <(cat {input.centromere} | grep "^{wildcards.chrom}" | cut -f1-4 | sed "s/{wildcards.chrom}/{wildcards.ref_name}-{wildcards.chrom}/g") > {output.annotation_bed}
        """

rule no_centromere_fasta:
    input:
        fasta="{prefix}.fasta",
        fasta_fai="{prefix}.fasta.fai",
    output:
        filtered_fasta = "{prefix}-no_centromere.fasta",
        filtered_fasta_one = temp("{prefix}-no_centromere.fasta_one"),
        filtered_fasta_two = temp("{prefix}-no_centromere.fasta_two"),
    envmodules:
        "modules",
        "modules-init",
        "modules-gs/prod",
        "modules-eichler/prod",
        "samtools/1.14",
    threads: 1
    resources:
        mem=calc_mem_gb,
        hrs=72,
    shell:
        """
        num_headers=$(wc -l {input.fasta_fai} | cut -f1 -d' ')
        if [ ! $num_headers -eq 1 ]
        then
            echo "more than one contig, not sure what to do yet: {input.fasta_fai}" 1>&2
            exit 1
        fi
        contig_name=$(cut -f1 {input.fasta_fai})

        # bedtools maskfasta -fi {input.fasta} -bed <(echo -e "${{contig_name}}\t52820106\t65927025") -fo {output.filtered_fasta}
        
        samtools faidx {input.fasta} ${{contig_name}}:1-52820106 | tail -n +2 > {output.filtered_fasta_one}
        samtools faidx {input.fasta} ${{contig_name}}:65927025-154259566 | tail -n +2 > {output.filtered_fasta_two}
        
        cat {output.filtered_fasta_one} {output.filtered_fasta_two} | fold -w 60 | sed "1i >${{contig_name}}" > {output.filtered_fasta}
        """


rule ava_aln:
    input:
        group_fasta = get_desired_pair,
    output:
        paf=temp(
            "results/{ref_name}/{chrom}/confident-mapping_{conf_prnct}/all-vs-all/{group}/{view}/{sample_one}_vs_{sample_two}.paf"
        ),
    params:
        minimap=config.get("minimap_params","-x asm20"),
    envmodules:
        "modules",
        "modules-init",
        "modules-gs/prod",
        "modules-eichler/prod",
        "minimap2/2.24",
    threads: 16
    resources:
        mem=calc_mem_gb,
        hrs=72,
    shell:
        """
        minimap2 \
            -c \
            {params.minimap} \
            -t {threads} \
            -o {output.paf} \
            {input.group_fasta}
        """


rule combine_ava:
    input:
        # group_paf=get_group_paf,
        group_paf=get_group_items(which_item="paf"),
    output:
        group_paf="results/{ref_name}/{chrom}/confident-mapping_{conf_prnct}/all-vs-all/{group}/{view}/{group}.paf",
    shell:
        """
        cat {input.group_paf} | sed "s/{wildcards.chrom}_RagTag-//g; s/{wildcards.chrom}/{wildcards.ref_name}-{wildcards.chrom}/g" > {output.group_paf}
        """


rule orient_majority:
    input:
        ava_paf="results/{ref_name}/{chrom}/confident-mapping_{conf_prnct}/all-vs-all/{group}/{view}/{group}.paf",
    output:
        oriented_ava_paf="results/{ref_name}/{chrom}/confident-mapping_{conf_prnct}/all-vs-all/{group}/{view}/{group}-oriented.paf",
    envmodules:
        "modules",
        "modules-init",
        "modules-gs/prod",
        "modules-eichler/prod",
        "rustybam/0.1.33",
    threads: 1
    resources:
        mem=calc_mem_gb,
        hrs=72,
    shell:
        """
        rustybam orient {input.ava_paf} > {output.oriented_ava_paf}

        # Need to adjust first column of output because rustybam appends the strand to the first column string.
        sed -i -r 's/([^\\t])([+-]{{1}})\\t(.*)/\\1\\t\\3/' {output.oriented_ava_paf}
        """


rule svbyeye:
    input:
        oriented_ava_paf="results/{ref_name}/{chrom}/confident-mapping_{conf_prnct}/all-vs-all/{group}/{view}/{group}-oriented.paf",
        annotation_bed="results/{ref_name}/{chrom}/confident-mapping_{conf_prnct}/all-vs-all/{group}/{view}/{group}.bed",
    output:
        ava_identity_png="results/{ref_name}/{chrom}/confident-mapping_{conf_prnct}/all-vs-all/{group}/{view}/{group}-oriented_by-identity.png",
        ava_sv_png="results/{ref_name}/{chrom}/confident-mapping_{conf_prnct}/all-vs-all/{group}/{view}/{group}-oriented_by-SV.png",
        ava_identity_only_png="results/{ref_name}/{chrom}/confident-mapping_{conf_prnct}/all-vs-all/{group}/{view}/{group}-oriented_by-identity_ONLY.png",
    log: "results/{ref_name}/{chrom}/confident-mapping_{conf_prnct}/all-vs-all/{group}/{view}/log.txt"
    container:
        svbyeye_cntr
    threads: 1
    params:
        desired_order = get_svbyeye_param
    resources:
        mem=calc_mem_gb,
        hrs=72,
    script:
        "scripts/plot-ava.R"
